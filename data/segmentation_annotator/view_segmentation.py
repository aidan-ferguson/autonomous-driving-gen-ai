### Script for viewing segmentation masks as annotated by the annotation tool

import argparse
import cv2
import numpy as np
import os
import matplotlib.pyplot as plt

# Class ids for annotation - the id corresponds to the position in the array
classes_colour_mapping = {
    "sky": (0,0,255,255),
    "ground": (0,255,0,255),
    "car_body": (255,0,0,255),
    "blue_cone": (255,255,0,255),
    "yellow_cone": (0,255,255,255),
    "orange_cone": (255,0,255,255),
    "large_orange_cone": (100,100,100,255),
    "barrier": (0,0,0,255),
    "tire_wall": (0,0,0,255),
    "tree": (0,0,0,255),
    "building": (0,0,0,255),
    "person": (0,0,0,255),
}

parser = argparse.ArgumentParser(
    description="View full segmentation masks generated by the EdgeSAM annotation tool"
)
parser.add_argument(
    '--source_image',
    required=True,
    type=str,
    help="The original image who's segmentation mask you want to view"
)
parser.add_argument(
    '--segmentation_folder',
    required=True,
    type=str,
    help="A folder in which the annotation data exists"
)
args = parser.parse_args()

def alpha_blend(img_a, img_b):
    clone_a = np.array(img_a)

    # normalize alpha channels from 0-255 to 0-1
    alpha_background = clone_a[:,:,3] / 255.0
    alpha_foreground = img_b[:,:,3] / 255.0

    # set adjusted colors
    for color in range(0, 3):
        clone_a[:,:,color] = alpha_foreground * img_b[:,:,color] + \
            alpha_background * clone_a[:,:,color] * (1 - alpha_foreground)

    # set adjusted alpha and denormalize back to 0-255
    clone_a[:, :, 3] = (1 - (1 - alpha_foreground) * (1 - alpha_background)) * 255
    return clone_a

def main():
    if not os.path.exists(args.source_image):
        raise Exception("You must provide a valid image file")
    
    if not os.path.exists(args.segmentation_folder):
        raise Exception("The provided segmentation folder does not exist")

    img_name = os.path.basename(args.source_image)
    if not os.path.exists(os.path.join(args.segmentation_folder, img_name)):
        raise Exception(f"There is no annotation data for {img_name} in the provided folder")
    img_seg_folder = os.path.join(args.segmentation_folder, img_name)

    
    base_img = cv2.cvtColor(cv2.imread(args.source_image), cv2.COLOR_BGR2RGBA)
    running_mask = np.zeros_like(base_img)
    for file in os.listdir(img_seg_folder):
        seg_filepath = os.path.join(img_seg_folder, file)
        seg_img = cv2.resize(cv2.imread(seg_filepath), (running_mask.shape[1], running_mask.shape[0]))
        seg_img = cv2.cvtColor(seg_img, cv2.COLOR_BGR2RGBA)

        seg_type = '_'.join(file.split(".")[0].split("_")[0:-1])
        mask_indices = np.nonzero(np.sum(seg_img[:,:,:2], axis=2))
        
        new_seg_img = np.zeros_like(seg_img)
        new_seg_img[mask_indices] = np.array(list(classes_colour_mapping[seg_type]))
        

        # running_mask = seg_img
        # break
        running_mask = alpha_blend(running_mask, new_seg_img)

    # print(running_mask)
    plt.imshow(cv2.addWeighted(running_mask, 0.5, base_img, 0.5, 0.0))
    plt.show()

if __name__ == "__main__":
    main()